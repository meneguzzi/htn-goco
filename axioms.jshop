;=============================================
; Axioms for goals
; predicates on goals - null(g,gi,gv) suspendedG(g,gi,gv) aborted(g,gi,gv) dropped(g,gi,gv) satisfiedG(g,gi,gv)
;=============================================

  (:- (null ?g ?gi ?gv) (not (var ?g ?gi ?gv) ) )

  (:- (inactiveG ?g ?gi ?gv) 
    	        (and (not (null ?g ?gi ?gv)) (not (f ?g ?gi ?gv)) 
					 (not (s ?g ?gi ?gv)) (not (terminalG ?g ?gi ?gv)) 
				     (not (suspendedG ?g ?gi ?gv)) (not (activeG ?g ?gi ?gv))) )
  ; Fix this
  (:- (activeG ?g ?gi ?gv) 
     	        (and (activatedG ?g ?gi ?gv) (not (f ?g ?gi ?gv)) (not (satisfiedG ?g ?gi ?gv)) 
					 (not (terminalG ?g ?gi ?gv)) (not (suspendedG ?g ?gi ?gv))) )

  (:- (satisfiedG ?g ?gi ?gv) (and (not (null ?g ?gi ?gv)) (not (terminalG ?g ?gi ?gv)) 
	                               (pg ?g ?gi ?gv) (s ?g ?gi ?gv) (not (f ?g ?gi ?gv))) )

;  (:- (suspended ?g ?gi ?gv) (and (not (null ?g ?gi ?gv)) (not (terminal ?g ?gi ?gv)) (suspended ?g ?gi ?gv) ) )

  (:- (failedG ?g ?gi ?gv) (and (not (null ?g ?gi ?gv)) (f ?g ?gi ?gv) ) )

  (:- (terminatedG ?g ?gi ?gv) (and (not (null ?g ?gi ?gv)) (or (dropped ?g ?gi ?gv) (aborted ?g ?gi ?gv)) ) )

  ; A rule to ensure that once a goal enters a terminal state (e.g. dropped or aborted), it cannot return
  (:- (terminalG ?g ?gi ?gv) (and (goal ?g ?gi ?a) (or (dropped ?g ?gi ?gv) (aborted ?g ?gi ?gv) )) )


;=============================================
; Axioms for commitments
; predicates on commitments 
; null(c,ci,cv) cancelled(c,ci,cv) released(c,ci,cv) 
; pending(c,ci,cv) satisfied(c,ci,cv)
;=============================================

(:- (null ?c ?ci ?cv) (not (var ?c ?ci ?cv)) )

(:- (conditional ?c ?ci ?cv) 
        (and (active ?c ?ci ?cv) (not (p ?c ?ci ?cv)) ) )
(:- (detached ?c ?ci ?cv) 
        (and (active ?c ?ci ?cv) (p ?c ?ci ?cv) ) )
; A conditional commitment is active
(:- (active ?c ?ci ?cv) (and (var ?c ?ci ?cv);(not (null ?c ?ci ?cv)) 
		           (not (terminal ?c ?ci ?cv))
	               (not (pending ?c ?ci ?cv)) 
		           (not (satisfied ?c ?ci ?cv)) 
			  ) )

(:- (terminated ?c ?ci ?cv)  (or (and (not (p ?c ?ci ?cv)) (cancelled ?c ?ci ?cv)) (released ?c ?ci ?cv)) )

; (:- (violated ?c ?ci ?cv) (or (and (p ?c ?ci ?cv) (cancelled ?c ?ci ?cv)) (and (not (p ?c ?ci ?cv)) ) ) ) ; Previous formalization with a mistaken disjunction, detected by Pankaj
(:- (violated ?c ?ci ?cv) (and (p ?c ?ci ?cv) (cancelled ?c ?ci ?cv)) ) 

(:- (satisfied ?c ?ci ?cv) (and (not (null ?c ?ci ?cv)) (not (terminal ?c ?ci ?cv)) (q ?c ?ci ?cv)) )

;(:- (expired ?c ?ci ?cv) (and (not (null ?c ?ci ?cv)) (not (p ?c ?ci ?cv)) ) )

; A rule to enumerate that certain states are terimnal
(:- (terminal ?c ?ci ?cv) (and (commitment ?c ?ci ?de ?cr) (or (cancelled ?c ?ci ?cv) (released ?c ?ci ?cv) (expired ?c ?ci ?cv))) )

