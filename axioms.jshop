;=============================================
; Axioms for goals
; predicates on goals - null(c) suspendedG(c) aborted(c) dropped(c) satisfiedG(c)
;=============================================

  (:- (inactiveG ?g) 
    	        (and (not (null ?g)) (not (pg ?g)) (not (f ?g)) (not (s ?g)) (not (lockedG ?g)) (not (suspendedG ?g))) )
      (:- (activeG ?g) 
    	        (and (not (null ?g)) (pg ?g) (not (f ?g)) (not (s ?g)) (not (lockedG ?g)) (not (suspendedG ?g))) )
    
      (:- (satisfiedG ?g) (and (not (null ?g)) (not (lockedG ?g)) (pg ?g) (s ?g) (not (f ?g))) )
    
    ;  (:- (suspended ?g) (and (not (null ?g)) (not (locked ?g)) (suspended ?g) ) )
    
      (:- (failedG ?g) (and (not (null ?g)) (f ?g) ) )
    
      (:- (terminatedG ?g) (and (not (null ?g)) (or (dropped ?g) (aborted ?g)) ) )
    
      ; A rule to ensure that 
      (:- (lockedG ?g) (and (goal ?g ?a) (or (dropped ?g) (aborted ?g) )) )


;=============================================
; Axioms for commitments
; predicates on commitments - null(c) cancelled(c) released(c) pending(c) satisfied(c)
;=============================================

 (:- (conditional ?c) 
        (and (active ?c) (not (p ?c)) ) )
 (:- (detached ?c) 
        (and (active ?c) (p ?c) ) )
 ; A conditional commitment is active
 (:- (active ?c) (and (not (null ?c)) 
                   ;(not (cancelled ?c)) 
	               ;(not (released ?c)) 
		           (not (locked ?c))
	               (not (pending ?c)) 
		           (not (satisfied ?c)) 
			  ) )

 (:- (terminated ?c)  (or (and (not (p ?c)) (cancelled ?c)) (released ?c)) )

 (:- (violated ?c) (or (and (p ?c) (cancelled ?c)) (and (not (p ?c)) ) ) )

 (:- (satisfied ?c) (and (not (null ?c)) (not (locked ?c)) (p ?c) (q ?c)) )

 ; (:- (expired ?c) (and (not (null ?c)) (not (p ?c)) ) )

 ; A rule to enumerate that certain states are terimnal
 (:- (locked ?c) (and (commitment ?c ?d ?a) (or (cancelled ?c) (released ?c) (expired ?c))) )

