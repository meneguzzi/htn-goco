(defdomain cgfo ; commitments and goals in a first order representation
 (

 ; Brief description of the fluents in this domain
 ; (goal ?g gi ?a) - ?g is a goal of agent ?a
 ; (commitment ?c ?ci ?de ?cr) - ?c is a commitment of agent ?d towards agent ?a

 ; (pg ?g ?gi ?gv) - a rule stating that the precondition for goal ?g is satisfied
 ; (s ?g ?gi ?gv) - a rule stating that the success condition for goal ?g is satisfied
 ; (f ?g ?gi ?gv) - a rule stating that the failure condition for goal ?g is satisfied
	
 ; (p ?c) - a rule stating that the antecedent of commitment ?c is satisfied
 ; (q ?c) - a rule stating that the consequent of commitment ?c is satisfied
	
 ; (eqGSCP ?g ?c) - a rule stating that the success condition of goal ?g (s ?g ?gi ?gv) is linked to the antecedent condition of commitment ?c (p ?c ?ci ?cv).

 ; States of commitments
 ; (null ?c)
 ; (detached ?c ?ci ?cv)
 ; (conditional ?c ?ci ?cv)
 ; (expired ?c ?ci ?cv)
 ; (pending ?c ?ci ?cv)
 ; (violated ?c ?ci ?cv)
 ; (terminated ?c ?ci ?cv)
 ; (active ?c ?ci ?cv) -- Which is either conditional or detached
 ; (satisfied ?c ?ci ?cv)

 ; States of goals
 ; (null ?g ?gi ?gv)
 ; (inactive ?g)
 ; (active ?g)
 ; (suspended ?g)
 ; (terminated ?g)
 ; (satisfied ?g)
 ; (failed ?g ?gi ?gv)


 ;=======================================================================================
 ; Purchase model for goals and commitments
 ;========================================================================================

 ; == Goals ==
 ; G(gi, x, pg, s, f) - x: agent, pg: precondition, s: successcondition, f: failurecondition

	 ; Merchant
	 ; G1 = G(M, T, paid(C), deadline(C))
	 ; G3 = G(M, paid(C), goods(C), deadline(C)) --- The merchant will adopt the goal to deliver the goods

	 ; Customer
	 ; G2 = G(C, needsgoods(C), goods(C), deadline(C))
	 ; G4 = G(c, goods(C), paid(C), deadline(C))

 ; == Commitments ==
 ; C(ci, x, y, p, q) - x: debtor, y: creditor, p: antecedent, q: consequent
 
 ; Merchant
 ; C1 = C(M, C, pay(C), goods(C))
 ; C2 = C(M, C, accepted(C), goods(C))
 ; C3 = C(M, C, returned(C), goods(C))
 ; C4 = C(M, C, returned(C), refund(C))

 ; Customer
 ; C5 = C(C, M, goods(C), pay(C))
 ; C6 = C(C, M, accepted(C), goods(C))

 ;=========================================================================================


 ;=========
 ; Goals
 ;=========

 ; Merchant
 ; G1 = G(m, T, paid(c), deadline(c))
 (:- (pg ?g G1 (?t)) (and (goal ?g ?gi ?a) ) )
 (:- (s ?g G1 (?t)) (and (goal ?g ?gi ?a) (var ?g ?gi (?t)) (paid ?x ?t)) )
 (:- (f ?g G1 (?t)) (and (goal ?g ?gi ?a) (var ?g ?gi (?t)) (deadline ?t) ))
 ; G3 = G(M, paid(C), goods(C), deadline(C)) --- The merchant will adopt the goal to deliver the goods to someone
 (:- (pg ?g G3 (?t)) (and (goal ?g ?gi ?a) (paid ?x ?t)) )
 (:- (s ?g G3 (?t)) (and (goal ?g ?gi ?a) (var ?g ?gi (?t)) (goods ?x ?t)) )
 (:- (f ?g G3 (?t)) (and (goal ?g ?gi ?a) (var ?g ?gi (?t)) (deadline ?t) ))
 ; Customer
 ; G2 = G(C, needsgoods(C), goods(C), deadline(C))
 (:- (pg ?g G2 (?t)) (and (goal ?g ?gi ?a) (needsgoods ?a ?t)) )
 (:- (s ?g G2 (?t)) (and (goal ?g ?gi ?a) (var ?g ?gi (?t)) (goods ?a ?t)))
 (:- (f ?g G2 (?t)) (and (goal ?g ?gi ?a) (var ?g ?gi (?t)) (deadline ?t)))
 ; G4 = G(c, goods(C), paid(C), deadline(C))
 (:- (pg ?g G4 (?t)) (and (goal ?g ?gi ?a) (goods ?g ?t)) )
 (:- (s ?g G4 (?t)) (and (goal ?g ?gi ?a) (var ?g ?gi (?t)) (paid ?g ?t) ))
 (:- (f ?g G4 (?t)) (and (goal ?g ?gi ?a) (var ?g ?gi (?t)) (deadline ?t) ))

 ;============
 ; Commitments
 ;============

 ; Merchant
 ; C1 = C(M, C, pay(C), goods(C))
 (:- (p ?c C1 (?t)) (and (commitment ?c ?ci ?d ?a) (var ?c ?ci (?t)) (paid ?a ?t)) ) 
 (:- (q ?c C1 (?t)) (and (commitment ?c ?ci ?d ?a) (var ?c ?ci (?t)) (goods ?a ?t)) )
 ; C2 = C(M, C, accepted(C), goods(C))
 ; (:- (p ?c C2 (?cl)) (and (commitment ?c ?ci ?d ?a) (var ?c ?ci (?t)) (accepted ?cl))) 
 ; (:- (q ?c C2 (?cl)) (and (commitment ?c ?ci ?d ?a) (var ?c ?ci (?t)) (goods ?cl)))
 ; C3 = C(M, C, returned(C), goods(C))
 (:- (p ?c C3 (?t)) (and (commitment ?c ?ci ?d ?a) (var ?c ?ci (?t)) (returned ?d ?t))) 
 (:- (q ?c C3 (?t)) (and (commitment ?c ?ci ?d ?a) (var ?c ?ci (?t)) (goods ?d ?t)))
 ; C4 = C(M, C, returned(C), refund(C))
 (:- (p ?c C4 (?t)) (and (commitment ?c ?ci ?d ?a) (var ?c ?ci (?t)) (returned ?d ?t))) 
 (:- (q ?c C4 (?t)) (and (commitment ?c ?ci ?d ?a) (var ?c ?ci (?t)) (refund ?d ?t)))

 ; Customer
 ; C5 = C(C, M, goods(C), pay(C))
 (:- (p ?c C5 (?t)) (and (commitment ?c ?ci ?d ?a) (var ?c ?ci (?t)) (goods ?d ?t)) ) 
 (:- (q ?c C5 (?t)) (and (commitment ?c ?ci ?d ?a) (var ?c ?ci (?t)) (paid ?d ?t)) )
 ; C6 = C(C, M, accepted(C), goods(C))
 ; (:- (p ?c C6 (?cl)) (and (commitment ?c ?ci ?d ?a) (accepted ?cl))) 
 ; (:- (q ?c C6 (?cl)) (and (commitment ?c ?ci ?d ?a) (goods ?cl)))
 

  ;==========================================================
  ;Equalities between conditions on commitments and on goals
  ;==========================================================
  ; True if the success condition of ?g matches the antecedent of ?c 
  ;(?gv and ?cv will unify with the specific instance of ?g and ?c that match this)
  (:- (eqGSCP ?g ?gv ?c ?cv) (and (imply (s ?g ?gi ?gv) (p ?c ?ci ?cv)) (imply (p ?c ?ci ?cv) (s ?g ?gi ?gv)) ) ) ; Basically a logical equivalence <-> 
	  ;TODO make sure that the variables ?gv and ?cv get instantiated
  ; True of the success condition of ?g matches the consequent of ?c
  (:- (eqGSCQ ?g ?gv ?c ?cv) (and (imply (s ?g ?gi ?gv) (q ?c ?ci ?cv)) (imply (q ?c ?ci ?cv) (s ?g ?gi ?gv)) ) ) ; Basically a logical equivalence <->
  ; True of the the antecedent of commitment ?c1 matches the consequent of commitment ?c2 (so they are reciprocal)
  (:- (eqCPCQ ?c1 ?cv1 ?c2 ?cv2) (and (imply (p ?c1 ?ci1 ?cv1) (q ?c2 ?ci2 ?cv2)) (imply (q ?c2 ?ci2 ?cv2) (p ?c1 ?ci1 ?cv1)) ) ) ; Basically a logical equivalence <->
	
  (:- (goalPossible ?g ?gi ?gv) (and (goal ?g ?gi ?a) (pg ?g  ?gi ?gv) ))
	

  ; An operator to make test if a rule worked OK
  (:operator (!!testRuleSuccess ?rule ?pars)
	  ()
	  ()
	  ()
	  0
  )
  ;==========================================================
  ; Rules for time passing when I want to model deadlines
  ;==========================================================
  ;(:- (eqGSCP ?g ?c) (and (imply (s ?g ?gi ?gv) (p ?c ?ci ?cv)) (imply (p ?c ?ci ?cv) (s ?g ?gi ?gv)) ) ) ; Basically a logical equivalence <->

 ;==================
 ; Operator syntax
 ;==================

 ; (:operator (!name ?arg)
 ;            () ; Precondition
 ; 	      () ; Delete List
 ; 	      () ; Add List
 ; 	       1 ; Cost
 ; )

 ;==================


 ;===========
 ; Operators	     
 ;===========

;=============================================
; Domain operators (and axioms)
;=============================================

  ; (:operator (!sendRequest ?a ?d)
  ;     (and (not (goodsc)) (agent ?a) (agent ?d))
  ; 
  ;     ()
  ;     ((requestm))
  ;     1
  ;   )
  ; 
  ;   (:operator (!sendOffer ?a ?d)
  ;     (and (not (goodsc)) (agent ?a) (agent ?d))
  ; 
  ;     ()
  ;     ((offerc))
  ; 	1
  ;   )
  ; 
  ;   (:operator (!sendAccept ?a ?d)
  ; 	(and (not (goodsc)) (agent ?a) (agent ?d))
  ; 	
  ; 	()
  ; 	((acceptedc))
  ;   )

 (:operator (!!testCondition ?c)
    (?c)

    ()
    ()
    0
 )

 (:operator (!sendOrder ?a ?d ?t)
	(and (not (goods(?t))) (agent ?a) (agent ?d) (call = ?a c) (call = ?d m))

	()
	((order ?a ?t))
	1
 )

 (:operator (!sendGoods ?a ?d ?t)
	(and (not (goods ?t)) (agent ?a) (agent ?d) (call = ?a m) (call = ?d c))
	
	()
	((goods ?d ?t))
	1
 )

 (:operator (!sendPayment ?a ?d ?t)
	(and (agent ?a) (agent ?d) (call = ?a c) (call = ?d m))

	()
	((paid ?a ?t))
	1
 )

 (:operator (!sendReturn ?a ?d ?t)
	(and (goods ?t) (agent ?a) (agent ?d) (call = ?a c) (call = ?d m))

	((goods ?d ?t))
	()
	1
 )

 (:operator (!sendRefund ?a ?d ?t)
	(and (not (goods ?t)) (agent ?a) (agent ?d) (call = ?a m) (call = ?d c))

	((paid ?d ?t))
	()
	2
 )

 (:operator (!manufactureGoods ?a ?t)
	(and (not (goods ?t)) (agent ?a) (call = ?a c))
	
	()
	((goods ?a ?t))
	10
 )

;=============================================
; Axioms for commitments
; predicates on commitments 
; null(c,ci,cv) cancelled(c,ci,cv) released(c,ci,cv) 
; pending(c,ci,cv) satisfied(c,ci,cv)
;=============================================

  (:- (null ?c ?ci ?cv) (not (var ?c ?ci ?cv)) )

  (:- (conditional ?c ?ci ?cv) 
	        (and (active ?c ?ci ?cv) (not (p ?c ?ci ?cv)) ) )
  (:- (detached ?c ?ci ?cv) 
	        (and (active ?c ?ci ?cv) (p ?c ?ci ?cv) ) )
  ; A conditional commitment is active
  (:- (active ?c ?ci ?cv) (and (var ?c ?ci ?cv);(not (null ?c ?ci ?cv)) 
			           (not (terminal ?c ?ci ?cv))
		               (not (pending ?c ?ci ?cv)) 
			           (not (satisfied ?c ?ci ?cv)) 
				  ) )

  (:- (terminated ?c ?ci ?cv)  (or (and (not (p ?c ?ci ?cv)) (cancelled ?c ?ci ?cv)) (released ?c ?ci ?cv)) )
  
  ; (:- (violated ?c ?ci ?cv) (or (and (p ?c ?ci ?cv) (cancelled ?c ?ci ?cv)) (and (not (p ?c ?ci ?cv)) ) ) ) ; Previous formalization with a mistaken disjunction, detected by Pankaj
  (:- (violated ?c ?ci ?cv) (and (p ?c ?ci ?cv) (cancelled ?c ?ci ?cv)) ) 

  (:- (satisfied ?c ?ci ?cv) (and (not (null ?c ?ci ?cv)) (not (terminal ?c ?ci ?cv)) (q ?c ?ci ?cv)) )

  ;(:- (expired ?c ?ci ?cv) (and (not (null ?c ?ci ?cv)) (not (p ?c ?ci ?cv)) ) )

  ; A rule to enumerate that certain states are terimnal
  (:- (terminal ?c ?ci ?cv) (and (commitment ?c ?ci ?de ?cr) (or (cancelled ?c ?ci ?cv) (released ?c ?ci ?cv) (expired ?c ?ci ?cv))) )

 ;======================
 ; Commitment operators
 ;======================

  (:operator (!!testSuccess ?c ?ci ?cv ?state)
	(commitment ?c ?ci ?de ?cr) 	
	()
	()
	0
  )

  (:operator (!create ?c ?ci ?de ?cr ?cv)
    ((commitment ?c ?ci ?de ?cr) 
     (null ?c ?ci ?cv)
    )

    ()
    ((var ?c ?ci ?cv) )
    0
  )

  (:operator (!suspend ?c ?ci ?de ?cr ?cv)
    ((commitment ?c ?ci ?de ?cr) 
     (active ?c ?ci ?cv)
    )

    ( )
    ((pending ?c ?ci ?cv))
    1 
  )

  ; FM: In PDDL it was revive, but in the papers it's called reactivate
  ; PT: Without checking for p in the pre-condition, these operators will 
  ;     not work correctly
  ; FM (26/12/2012): Which ones? Just reactivate?  <------ TODO: Check this Pankaj

  (:operator (!reactivate ?c ?ci ?de ?cr ?cv)
    ((commitment ?c ?ci ?de ?cr) 
     (pending ?c ?ci ?cv)
    )

    ((pending ?c ?ci ?cv))
    ( )
    1
  )

  ; Satisfy should be an operator if we want the state never to leave satisfied
  ; (:operator (!satisfy ?c ?ci ?de ?cr ?cv)
  ;     ((commitment ?c ?ci ?de ?cr) 
  ;      (active ?c ?ci ?cv)
  ;      (q ?c ?ci ?cv)
  ;     )
  ; 
  ;     ( )
  ;     ((satisfied ?c ?ci ?cv))
  ;     1 
  ;   )
  (:operator (!expire ?c ?ci ?de ?cr ?cv)
    ((commitment ?c ?ci ?de ?cr) 
     (conditional ?c ?ci ?cv)
     (activetimeout ?c ?ci ?cv)
    )

    ( )
    ((expired ?c ?ci ?cv))
    5
  )
  
  (:operator (!timeoutviolate ?c ?ci ?de ?cr ?cv)
    ((commitment ?c ?ci ?de ?cr) 
     (detached ?c ?ci ?cv)
     (detachedtimeout ?c ?ci ?cv)
    )

    ((detached ?c ?ci ?cv))
    ((violated ?c ?ci ?cv))
    5
  )

  (:operator (!cancel ?c ?ci ?de ?cr ?cv)
    ((commitment ?c ?ci ?de ?cr) 
     (active ?c ?ci ?cv)
    )

    ( )
    ((cancelled ?c ?ci ?cv))
    10
  )


  (:operator (!release ?c ?ci ?de ?cr ?cv)
    ((commitment ?c ?ci ?de ?cr) 
     (active ?c ?ci ?cv)
    )

    ( )
    ((released ?c ?ci ?cv))
    1 
  )


;=============================================
; Axioms for goals
; predicates on goals - null(g,gi,gv) suspendedG(g,gi,gv) aborted(g,gi,gv) dropped(g,gi,gv) satisfiedG(g,gi,gv)
;=============================================

  (:- (null ?g ?gi ?gv) (not (var ?g ?gi ?gv) ) )

  (:- (inactiveG ?g ?gi ?gv) 
    	        (and (not (null ?g ?gi ?gv)) (not (f ?g ?gi ?gv)) 
					 (not (s ?g ?gi ?gv)) (not (terminalG ?g ?gi ?gv)) 
				     (not (suspendedG ?g ?gi ?gv)) (not (activeG ?g ?gi ?gv))) )
  ; Fix this
  (:- (activeG ?g ?gi ?gv) 
     	        (and (activatedG ?g ?gi ?gv) (not (f ?g ?gi ?gv)) (not (satisfiedG ?g ?gi ?gv)) 
					 (not (terminalG ?g ?gi ?gv)) (not (suspendedG ?g ?gi ?gv))) )

  (:- (satisfiedG ?g ?gi ?gv) (and (not (null ?g ?gi ?gv)) (not (terminalG ?g ?gi ?gv)) 
	                               (pg ?g ?gi ?gv) (s ?g ?gi ?gv) (not (f ?g ?gi ?gv))) )

;  (:- (suspended ?g ?gi ?gv) (and (not (null ?g ?gi ?gv)) (not (terminal ?g ?gi ?gv)) (suspended ?g ?gi ?gv) ) )

  (:- (failedG ?g ?gi ?gv) (and (not (null ?g ?gi ?gv)) (f ?g ?gi ?gv) ) )

  (:- (terminatedG ?g ?gi ?gv) (and (not (null ?g ?gi ?gv)) (or (dropped ?g ?gi ?gv) (aborted ?g ?gi ?gv)) ) )

  ; A rule to ensure that once a goal enters a terminal state (e.g. dropped or aborted), it cannot return
  (:- (terminalG ?g ?gi ?gv) (and (goal ?g ?gi ?a) (or (dropped ?g ?gi ?gv) (aborted ?g ?gi ?gv) )) )


;=============================================
; Goal operators
;=============================================

  (:operator (!!testSuccessG ?g ?gi ?gv ?state)
	(goal ?g ?gi ?a)
	()
	()
	0
  )

  ; Regular transitions 
  (:operator (!consider ?g ?gi ?a ?gv)
    ((goal ?g ?gi ?a)
     (null ?g ?gi ?gv)
     (pg ?g ?gi ?gv)
    )

    ()
    ((var ?g ?gi ?gv))
    1 
  )

 (:operator (!activate ?g ?gi ?a ?gv)
	((goal ?g ?gi ?a) (inactiveG ?g ?gi ?gv))
	
	()
	((activatedG ?g ?gi ?gv))
	1
 )

  (:operator (!suspend ?g ?gi ?a ?gv)
    ((goal ?g ?gi ?a)
     (not (terminalG ?g ?gi ?gv))
     (not (null ?g ?gi ?gv))
    )

    ((activatedG ?g ?gi ?gv))
    ((suspendedG ?g ?gi ?gv))
    1 
  )

  (:operator (!reconsider ?g ?gi ?a ?gv)
    ((goal ?g ?gi ?a)
     (suspendedG ?g ?gi ?gv)
     (not (terminalG ?g ?gi ?gv))
     ;(not (pg ?g ?gi ?gv))
     (not (null ?g ?gi ?gv))
    )

    ((suspendedG ?g ?gi ?gv))
    ( )
    1 
  )


  (:operator (!reactivate ?g ?gi ?a ?gv)
    ((goal ?g ?gi ?a)
     (suspendedG ?g ?gi ?gv)
     (not (terminalG ?g ?gi ?gv))
     ;(pg ?g ?gi ?gv)
     (not (null ?g ?gi ?gv))
    )

    ((suspendedG ?g ?gi ?gv))
    ( (activatedG ?g ?gi ?gv) )
    1
  )

  (:operator (!drop ?g ?gi ?a ?gv)
    ((goal ?g ?gi ?a)
     (not (terminalG ?g ?gi ?gv))
     (not (null ?g ?gi ?gv))
    )

    ( )
    ((dropped ?g ?gi ?gv))
    1
  )

  (:operator (!abort ?g ?gi ?a ?gv)
     ((goal ?g ?gi ?a)
      (not (terminalG ?g ?gi ?gv))
      (not (null ?g ?gi ?gv))
     )

     ( )
     ((aborted ?g))
     1
  )

  ;Fail does not depend on the agent to happen
  ; (:operator (!fail ?g ?gi ?a ?gv)
  ;     ((goal ?g ?gi ?a)
  ;      (not (null ?g ?gi ?gv))
  ;      (f ?g ?gi ?gv)
  ;     )
  ; 
  ;     ( )
  ;     ((failed ?g ?gi ?gv))
  ;     1
  ;   )

  ;================================
  ; Methods to achieve agent goals
  ;================================

  (:method (achieveGoals)
    workTowardsGoal
	((goal ?g ?gi ?a) (activeG ?g ?gi ?gv))
	((achieveGoal ?g ?gi ?a ?gv))
  )

  (:method (achieveGoals)
    activateGoal
    ((goal ?g ?gi ?a) (goalPossible ?g ?gi ?gv))
	((!consider ?g ?gi ?a ?gv) (!activate ?g ?gi ?a ?gv) (achieveGoals))
	
	noGoalsPossible
	()
	()
  )

  (:method (achieveGoals)
  	multipleCommitments
	((goal ?g1 ?gi1 ?a1) (activeG ?g1 ?gi1 ?gv1) (goal ?g2 ?gi2 ?a2) (activeG ?g2 ?gi2 ?gv2) (commitment ?c1 ?ci1 ?a1 ?a2) (commitment ?c2 ?ci2 ?a2 ?a1) 
	  (eqGSCP ?g1 ?gv1 ?c1 ?cv1) (eqGSCP ?g2 ?gv2 ?c2 ?cv2))
	( (entice ?g1 ?c1 ?a1 ?a2) (entice ?g2 ?c2 ?a2 ?a1) (detach ?c1 ?ci1 ?cv1) (detach ?c2 ?ci2 ?cv2))
  )

  (:method (achieveGoal ?g ?gi ?a ?gv) 
	genericEnticeToAchieve ;FM (2013/01/04): I'm deliberately forcing the variables of the 
						   ; commitment to be equal to those in the goal
	((activeG ?g ?gi ?gv) (goal ?g ?gi ?a) (commitment ?c ?ci ?a ?d) (assign ?cv ?gv) (eqGSCP ?g ?gv ?c ?cv) (goal ?g2 ?gi2 ?a) (assign ?gv2 ?cv) (eqGSCQ ?g2 ?gv2 ?c ?cv) (call != ?g ?g2))
	((entice ?g ?gi ?gv ?c ?ci ?cv ?a ?d) (detach ?c ?ci ?cv) (deliver ?g2 ?gi2 ?gv2 ?c ?ci ?cv ?a ?d) (achieveGoal ?g2 ?gi2 ?gv2 ?a))
  )

  ;; Redo from here on before testing.
  (:method (achieveGoal g2 ?gi (?t) c)
      ((activeG g2 ?gi (?t)) (goal g2 ?gi c) )
      ((!manufactureGoods c ?t))
  )

  (:method (achieveGoal g3 ?gi (?t) m)
	((activeG g3 ?gi (?t)) (goal g3 ?gi m))
	((!sendGoods m c ?t))
  )

  (:method (achieveGoal g4 ?gi (?t) c)
	((activeG g4 ?gi (?t)) (goal g4 ?gi c))
	((!sendPayment c m ?t))
  )

  (:method (detach ?c ?ci (?t))
    ((call = ?c c1) (active ?c ?ci (?t)) (commitment ?c ?ci ?a ?d)) ;FM (2013/01/17) Changed the precondition to be more generic
	((!sendPayment ?d ?a ?t)) ;FM Was ((!sendPayment c m ?t))
	
	((call = ?c c5) (active ?c ?ci (?t)) (commitment ?c ?ci ?a ?d)) ;FM (2013/01/17) Changed the precondition to be more generic
	((!sendGoods ?d ?a ?t)) ; FM Was ((!sendGoods m c ?t))
  )



  ;==================================
  ; Methods on goals and commitments
  ; Practical Rules
  ;=================================

  ; PT: These methods need to relate  commitment's antecedent
  ; and consequent with goals success condition.
  ; If G = G(x, s, f), then C should be C(x, y, s, u) where u
  ; can be any condition, but "s" need to be the same. 
  ; I am not sure how to write it in this language.

  ;TODO (2013/01/04) Make sure that my current equality of ?cv and ?gv for the eqGSCP is correct
  (:method (entice ?g ?gi ?gv ?c ?ci ?cv ?d ?a)
    ((goal ?g ?gi ?d) (activeG ?g ?gi ?gv) (commitment ?c ?ci ?d ?a) (null ?c ?ci ?cv) 
     (eqGSCP ?g ?gv ?c ?cv) ; In theory, this axiom will ensure that the S of G is true at the same time as the P of C
     )
    ((!create ?c ?ci ?d ?a ?cv))
  )
	
 
  ; Suspends an offer from ?d to ?a
  (:method (suspendOffer ?g ?gi ?gv ?c ?ci ?cv ?d ?a)
     ((goal ?g ?gi ?d) (suspendedG ?g ?gi ?gv) (commitment ?c ?ci ?d ?a) (active ?c ?ci ?cv))
     ((!suspend ?c ?ci ?d ?a ?cv))
  )
  
 ; Revives a commitment when a goal becomes active
  (:method (revive ?g ?gi ?gv ?c ?ci ?cv ?d ?a)
    ((goal ?g ?gi ?d) (activeG ?g ?gi ?gv) (commitment ?c ?ci ?d ?a) (pending ?c ?ci ?cv))
    ((!reactivate ?c ?ci ?d ?a ?cv))
  )

  ; Withdraws a commitment when a goal has failed or terminated
  (:method (withdrawOffer ?g ?gi ?gv ?c ?ci ?cv ?d ?a)
    ((goal ?g ?gi ?d) (or (failedG ?g ?gi ?gv) (terminatedG ?g ?gi ?gv)) (commitment ?c ?ci ?d ?a) (active ?c ?ci ?cv))
    ((!cancel ?c ?ci ?d ?a ?cv))
  )

  ; Revives a commitment to withdraw it?	
  (:method (reviveToWithdraw ?g ?gi ?gv ?c ?ci ?cv ?d ?a)
    ((goal ?g ?gi ?d) (or (failedG ?g ?gi ?gv) (terminatedG ?g ?gi ?gv)) (commitment ?c ?ci ?d ?a) (pending ?c ?ci ?cv))
    ((!reactivate ?c ?ci ?d ?a ?cv))
  )
	
  ;Axioms Added for readbility 
  (:- (negotiable ?g ?gi ?gv ?c ?ci ?cv) (and (or (activeG ?g ?gi ?gv) (suspendedG ?g ?gi ?gv) ) (or (expired ?c ?ci ?cv) (terminated ?c ?ci ?cv)) ) )
	
  (:method (negotiate ?g ?gi ?gv ?c1 ?ci1 ?cv1 ?c2 ?ci2 ?cv2 ?d ?a1 ?a2)
    ;Replaced by this expression TODO check what we are using a1 for
    ((goal ?g ?gi ?d) (commitment ?c1 ?ci1 ?d ?a2) (commitment ?c2 ?ci2 ?d ?a2) (null ?c2 ?ci2 ?cv2) (negotiable ?g ?gi ?gv ?c1 ?ci1 ?cv2))
    ((!create ?c2 ?ci2 ?d ?a2 ?ci2)) ;check that we really want ?ci2 as the last parameter instead of cv2
  )
	
  (:method (abandonEndGoal ?g ?gi ?gv ?c ?ci ?cv ?d ?a)
  ; Combinations of (A v U) and (E v T): AE AT UE UT

    ((goal ?g ?gi ?d) (or (activeG ?g ?gi ?gv) (suspendedG ?g ?gi ?gv)) (commitment ?c ?ci ?d ?a) (or (expired ?c ?ci ?cv) (terminated ?c ?ci ?cv)))
    ((!drop ?g ?gi ?d ?gv))
  )
	
  ;Deliver and Deliver' are encoded in a single method
  (:method (deliver ?g ?gi ?gv ?c ?ci ?cv ?d ?a)
    ; Deliver
    ((goal ?g ?gi ?d) (null ?g ?gi ?gv) (commitment ?c ?ci ?d ?a) (detached ?c ?ci ?cv))
    ( (!consider ?g ?gi ?d ?gv) (!activate ?g ?gi ?d ?gv) )

    ; Deliver'
    ((goal ?g ?gi ?d) (inactiveG ?g ?gi ?gv) (commitment ?c ?ci ?d ?a) (detached ?c ?ci ?cv))
    ((!activate ?g ?gi ?d ?gv))
  )


  (:method (backBurner ?g ?gi ?gv ?c ?ci ?cv ?d ?a)
    ((goal ?g ?gi ?d) (activeG ?g ?gi ?gv) (commitment ?c ?ci ?d ?a) (pending ?c ?ci ?cv))
    ((!suspend ?g ?gi ?d ?gv))
  )
	

  (:method (frontBurner ?g ?gi ?gv ?c ?ci ?cv ?d ?a)
    ((goal ?g ?gi ?d) (suspendedG ?g ?gi ?gv) (commitment ?c ?ci ?d ?a) (detached ?c ?ci ?cv))
    ((!reactivate ?g ?gi ?d ?gv))
  )
	
  (:method (abandonMeansGoal ?g ?gi ?gv ?c ?ci ?cv ?d ?a)
    ((goal ?g ?gi ?d) (or (activeG ?g ?gi ?gv) (suspendedG ?g ?gi ?gv)) (commitment ?c ?ci ?d ?a) 
		              (or (expired ?c ?ci ?cv) (terminated ?c ?ci ?cv)) )
    ((!drop ?g ?gi ?d ?gv))
  )
	
  (:method (persist ?g ?gi ?gv ?c ?ci ?cv ?g2 ?gi2 ?gv2 ?d ?a)
    ((goal ?g ?gi ?d) (or (terminatedG ?g ?gi ?gv) (failedG ?g ?gi ?gv)) 
     (commitment ?c ?ci ?d ?a) (detached ?c ?ci ?cv) (goal ?g2 ?gi2 ?d) (null ?g2 ?gi2 ?gv2))
    ((!consider ?g2 ?gi2 ?d ?gv2) (!activate ?g2 ?gi2 ?d ?gv2))
  )
	
  (:method (giveUp ?g ?gi ?gv ?c ?ci ?cv ?d ?a)
    ((goal ?g ?gi ?d) (or (terminatedG ?g ?gi ?gv) (failed ?g ?gi ?gv)) (commitment ?c ?ci ?d ?a) (detached ?c ?ci ?cv))
    ((!cancel ?c ?ci ?d ?a ?cv))
  )

  ;=========================
  ; Methods to test the rules
  ;=========================
  (:method (testCommitment ?c ?ci ?cv ?s)
    ((commitment ?c ?ci ?d ?a) (call = ?s null) (null ?c ?ci ?cv))
    ((!!testSuccess ?c ?ci ?cv ?s))

    ((commitment ?c ?ci ?d ?a) (call = ?s conditional) (conditional ?c ?ci ?cv))
    ((!!testSuccess ?c ?ci ?cv ?s))

	((commitment ?c ?ci ?d ?a) (call = ?s active) (active ?c ?ci ?cv))
    ((!!testSuccess ?c ?ci ?cv ?s))

    ((commitment ?c ?ci ?d ?a) (call = ?s nactive) (not (active ?c ?ci ?cv)))
    ((!!testSuccess ?c ?ci ?cv ?s))

	((commitment ?c ?ci ?d ?a) (call = ?s detached) (detached ?c ?ci ?cv))
    ((!!testSuccess ?c ?ci ?cv ?s))

    ((commitment ?c ?ci ?d ?a) (call = ?s expired) (expired ?c ?ci ?cv))
    ((!!testSuccess ?c ?ci ?cv ?s))

    ((commitment ?c ?ci ?d ?a) (call = ?s pending) (pending ?c ?ci ?cv))
    ((!!testSuccess ?c ?ci ?cv ?s))

    ((commitment ?c ?ci ?d ?a) (call = ?s terminated) (terminated ?c ?ci ?cv))
    ((!!testSuccess ?c ?ci ?cv ?s))

    ((commitment ?c ?ci ?d ?a) (call = ?s violated) (violated ?c ?ci ?cv))
    ((!!testSuccess ?c ?ci ?cv ?s))

    ((commitment ?c ?ci ?d ?a) (call = ?s satisfied) (satisfied ?c ?ci ?cv))
    ((!!testSuccess ?c ?ci ?cv ?s))

    ((commitment ?c ?ci ?d ?a) (call = ?s cancelled) (cancelled ?c ?ci ?cv))
    ((!!testSuccess ?c ?ci ?cv ?s))
	
    ((commitment ?c ?ci ?d ?a) (call = ?s terminal) (terminal ?c ?ci ?cv))
    ((!!testSuccess ?c ?ci ?cv ?s))
  )

	(:method (testGoal ?g ?gi ?gv ?s)
	    ((goal ?g ?gi ?a) (call = ?s null) (null ?g ?gi ?gv))
	    ((!!testSuccessG ?g ?gi ?gv ?s))
	
	   	((goal ?g ?gi ?a) (call = ?s inactive) (inactiveG ?g ?gi ?gv))
	    ((!!testSuccessG ?g ?gi ?gv ?s))
	
	    ((goal ?g ?gi ?a) (call = ?s ninactive) (not (inactiveG ?g ?gi ?gv)))
	    ((!!testSuccessG ?g ?gi ?gv ?s))
	
	   	((goal ?g ?gi ?a) (call = ?s active) (activeG ?g ?gi ?gv))
	    ((!!testSuccessG ?g ?gi ?gv ?s))
	
	   	((goal ?g ?gi ?a) (call = ?s nactive) (not (activeG ?g ?gi ?gv)))
	    ((!!testSuccessG ?g ?gi ?gv ?s))
	
	    ((goal ?g ?gi ?a) (call = ?s suspended) (suspendedG ?g ?gi ?gv))
	    ((!!testSuccessG ?g ?gi ?gv ?s))
	
	    ((goal ?g ?gi ?a) (call = ?s nsuspended) (not (suspendedG ?g ?gi ?gv)))
	    ((!!testSuccessG ?g ?gi ?gv ?s))
	
	   	((goal ?g ?gi ?a) (call = ?s terminated) (terminatedG ?g ?gi ?gv))
	    ((!!testSuccessG ?g ?gi ?gv ?s))
	
	   	((goal ?g ?gi ?a) (call = ?s failed) (failed ?g ?gi ?gv))
	    ((!!testSuccessG ?g ?gi ?gv ?s))
	   
	   	((goal ?g ?gi ?a) (call = ?s satisfied) (satisfiedG ?g ?gi ?gv))
	    ((!!testSuccessG ?g ?gi ?gv ?s))
	
	   	((goal ?g ?gi ?a) (call = ?s nsatisfied) (not (satisfiedG ?g ?gi ?gv)))
	    ((!!testSuccessG ?g ?gi ?gv ?s))
		
	   	((goal ?g ?gi ?a) (call = ?s terminal) (terminalG ?g ?gi ?gv))
	    ((!!testSuccessG ?g ?gi ?gv ?s))
	)
	
	(:method (testGoalCommitmentRule ?rule ?g ?gi ?a ?c ?ci ?de ?cr)
		((goal ?g ?gi ?a) (commitment ?c ?ci ?de ?cr) (call = ?rule eqGSCP) (eqGSCP ?g ?gv ?c ?cv))
		((!!testRuleSuccess ?rule (?g ?gi ?gv ?c ?ci ?cv) ))
	)
	
   ; (:method (testCondition ?c) 
   ; 	
   ; 	)	
 )

)