(defdomain cg
 (
	; (:operator (!name ?arg)
    ;            () ; Precondition
    ; 	           () ; Delete List
    ; 		       () ; Add List
    ; 			   1 ; Cost
    ; )


  ;; Operators
 (:operator (!createConditional ?c)
	 ((commitment ?c) ; Precondition
	  (null ?c)
	  (not (p)))

	 ((null ?c)) ; Delete list
     ((conditional ?c)) ; Add List
	 1 ; Cost
    )

    (:operator (!createDetached ?c)
	  ( (commitment ?c); Precondition
	    (null ?c)
	    (p))

  	   ((null ?c)) ; Delete list
       ((detached ?c))
	   1
    )

    (:operator (!expire ?c)
	   ((commitment ?c)
		(conditional ?c)
		(activetimeout))

        ((conditional ?c))
    	((expired ?c))
        1
    )

    (:operator (!detach ?c)
	 ( (commitment ?c)
       (conditional ?c)
			    (p) )

         ((conditional ?c))
         ((detached ?c))
         1
    )

    (:operator (!suspendConditional ?c)
	 ( (commitment ?c)
		            (conditional ?c))

       ((conditional ?c))
       ((pending ?c))
       1 
    )

    (:operator (!suspendDetached ?c)
	 ( (commitment ?c)
			    (detached ?c))

         ((detached ?c))
    ((pending ?c))
    1 
    )


    (:operator (!reviveConditional ?c)
	 ( (commitment ?c)
		            (pending ?c)
			    (not (p)))

         ((pending ?c))
    ((conditional ?c))
    1
    )


    (:operator (!reviveDetached ?c)
	 ( (commitment ?c)
		            (pending ?c)
			    (p))

         ((pending ?c))
    ((detached ?c))
    1 
    )

    (:operator (!satisfy ?c)
	 ( (commitment ?c)
		            (not (null ?c))
			    (not (expired ?c))
			    (not (violated ?c))
			    (q))

         ((conditional ?c) (detached ?c))
    ((satisfied ?c))
    1 
    )

    (:operator (!timeoutviolate ?c)
	 ( (commitment ?c)
			    (detached ?c)
			    (detachedtimeout))

         ((detached ?c))
    ((violated ?c))
    1
    )

    (:operator (!cancel ?c)
	 ( (commitment ?c)
			    (conditional ?c))

         ((conditional ?c))
    ((terminated ?c))
    1 
    )


    (:operator (!cancelviolate ?c)
	 ( (commitment ?c)
			    (detached ?c))

         ((detached ?c))
    ((violated ?c))
    1 
    )

    
;=============================================
; Goal transitions
;=============================================



  ; Regular transitions 
  (:operator (!consider ?g)

     ( (goal ?g)
		        (null ?g))

     ((null ?g))
    ((inactive ?g))
    1 
  )

  (:operator (!activate ?g)

     ( (goal ?g)
		        (inactive ?g))

     ((inactive ?g))
    ((active ?g))
    1
  )

  (:operator (!suspendI ?g)

     ( (goal ?g)
		        (inactive ?g))

     ((inactive ?g))
    ((suspended ?g))
    1 
  )


  (:operator (!suspendA ?g)

     ( (goal ?g)
		        (active ?g))

     ((active ?g))
    ((suspended ?g))
    1
  )


  (:operator (!reconsider ?g)

     ( (goal ?g)
		        (suspended ?g))

     ((suspended ?g))
    ((inactive ?g))
    1 
  )


  (:operator (!reactivate ?g)

     ( (goal ?g)
		        (suspended ?g))

     ((suspended ?g))
    ((active ?g))
    1
  )

  (:operator (!dropOrAbortI ?g)

     ( (goal ?g)
		        (inactive ?g))

     ((inactive ?g))
    ((terminated ?g))
    1
  )

  (:operator (!dropOrAbortA ?g)

     ( (goal ?g)
		        (active ?g))

     ((active ?g))
    ((terminated ?g))
    1
  )

  (:operator (!dropOrAbortU ?g)

     ( (goal ?g)
		        (suspended ?g))

     ((suspended ?g))
    ((terminated ?g))
    1
  )


  (:operator (!failI ?g)

     ( (goal ?g)
		        (inactive ?g))

     ((inactive ?g))
    ((failed ?g))
    1
  )

  (:operator (!failA ?g)

     ( (goal ?g)
		        (active ?g))

     ((active ?g))
    ((failed ?g))
    1
  )

  (:operator (!failU ?g)

     ( (goal ?g)
		        (suspended ?g))

     ((suspended ?g))
    ((failed ?g))
    1
  )


  ;===
  ; These are different for the different goals
  ;===

  ;********
  ; endgoal
  ;********

  (:operator (!suceedIendgoal ?g)

     ( (endgoal ?g)
		        (inactive ?g)
			(p))

     ((inactive ?g))
    ((satisfied ?g))
    1
  )


  (:operator (!succeedAendgoal ?g)

     ( (endgoal ?g)
		        (active ?g)
			(p))

     ((active ?g))
    ((satisfied ?g))
    1
  )

  (:operator (!succeedUendgoal ?g)

     ( (endgoal ?g)
		        (suspended ?g)
			(p))

     ((suspended ?g))
    ((satisfied ?g))
    1
  )

  ;********
  ; means goal
  ;********

  (:operator (!suceedImeansgoal ?g)

     ( (meansgoal ?g)
		        (inactive ?g)
			(p))

     ((inactive ?g))
    ((satisfied ?g))
    1
  )


  (:operator (!succeedAmeansgoal ?g)

     ( (meansgoal ?g)
		        (active ?g)
			(p))

     ((active ?g))
    ((satisfied ?g))
    1
  )

  (:operator (!succeedUmeansgoal ?g)

     ( (meansgoal ?g)
		        (suspended ?g)
			(p))

     ((suspended ?g))
    ((satisfied ?g))
    1
  )


  ;****************
  ; discharge goal
  ;****************

  (:operator (!suceedIdisgoal ?g)

     ( (disgoal ?g)
		        (inactive ?g)
			(q))

     ((inactive ?g))
    ((satisfied ?g))
    1
  )


  (:operator (!succeedAdisgoal ?g)

     ( (disgoal ?g)
		        (active ?g)
			(q))

     ((active ?g))
    ((satisfied ?g))
    1
  )

  (:operator (!succeedUdisgoal ?g)

     ( (disgoal ?g)
		        (suspended ?g)
			(q))

     ((suspended ?g))
    ((satisfied ?g))
    1
  )


;=============================================
; Domain operations
;=============================================
    
  (:operator (!bringAboutp)
     (not (p))
     ()
    ((p))
    1
  )

  (:operator (!bringAboutq)
     (not (q))
     ()
    ((q))
    1 
  )

  (:operator (!activetimeoutoccurs)
     (not (activetimeout))
     ()
    ((activetimeout))
    1
  )

  (:operator (!detachedtimeoutoccurs)
     (not (detachedtimeout))
     ()
    ((detachedtimeout))
    1
  )


  ;; Task Networks
	; (:method (accommodation ?name ?location)
	; 	         ; Precondition Start
	; 	         nil ;((not (booked ?name ?hotel))) ; Precondition End
	; 		     ; Task List Start
	; 		     ((!accommodate ?name ?location)) ; Task List End
	; 	) ; End Method
	
	
	;; Method to create a commitment
	(:method (create ?c)
		         ; Precondition Start
		         ((commitment ?c) (null ?c) (not (p))) ; Precondition End
			     ; Task List Start
			     ((!createConditional ?c)) ; Task List End
				
				 ; Precondition Start
		         ;((commitment ?c) (null ?c) (p)) ; Precondition End
			     ; Task List Start
			     ;((!createDetached ?c)) ; Task List End
				
				; Precondition Start
		         ((commitment ?c) (null ?c) (not (p))) ; Precondition End
			     ; Task List Start
			     ((!bringAboutp) (!createDetached ?c)) ; Task List End
		) ; End Method
		
	;;Method to suspend a commitment
	(:method (suspend ?c)
		         ; Precondition Start
		         ((commitment ?c) (conditional ?c)) ; Precondition End
			     ; Task List Start
			     ((!suspendConditional ?c)) ; Task List End
				
				
				 ; Precondition Start
		         ((commitment ?c) (detached ?c)) ; Precondition End
			     ; Task List Start
			     ((!suspendDetached ?c)) ; Task List End
		) ; End Method
	
   	(:method (entice ?g ?c)
		         ; Precondition Start
		         ((goal ?g) (active ?g) (commitment ?c) (null ?c)) ; Precondition End
			
			     ; Task List Start
			     ((create ?c)) ; Task List End
		) ; End Method
	
		
	(:method (suspendOffer ?g ?c)
			; Precondition Start
	         ((goal ?g) (suspended ?g) (commitment ?c) (active ?c)) ; Precondition End
		
		     ; Task List Start
		     ((suspend ?c)) ; Task List End
	  ) ; End Method
 )

)